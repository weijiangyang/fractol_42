**Fract’ol** 项目（来自 42 学校）旨在使用 **MiniLibX**（42 学校的基础图形库）显示**数学分形**，例如**Mandelbrot**、**Julia**，有时还包括**Burning Ship**。
https://www.geogebra.org/m/mfewjrek
以下是一份**完整的分步**指南，可帮助您成功完成此项目：

---

## ✅ **1. 项目目标**

您必须：

* 在窗口中生成并显示**分形**。
* 支持**键盘/鼠标交互**（缩放、平移、更改颜色等）。
* 了解**复数**、**视觉递归**和**像素图形**的基础知识。

---

## 🧠 **2.理解曼德布洛特分形**

**数学公式**：

$$
z_{n+1} = z_n^2 + c
$$

* `z` 和 `c` 是 **复数**。
* 我们从 `z = 0` 开始，`c` 由屏幕上的每个像素（变换后的坐标）决定。
* 重复此过程，直到 `|z|` 超过 2 或达到最大迭代次数。

**目标**：确定一个点（像素）是否在曼德布洛特集合中。

---

## 🧱 **3.技术步骤**

### 🔹 步骤 1：MiniLibX 初始化

* 使用 `mlx_new_window` 创建窗口
* 使用 `mlx_new_image` 创建图像
* 使用 `mlx_get_data_addr` 获取缓冲区

### 🔹 步骤 2：显示循环

* 对于每个像素 `(x, y)`：

1. 将像素转换为**复坐标 (Re + Im\*i)**。
2. 应用**曼德布洛特或朱利亚公式**。
3. 根据迭代次数选择颜色。
4. 在图像缓冲区中绘制像素。

### 🔹 步骤 3：显示图像

* 填充像素后，使用 `mlx_put_image_to_window`。

### 🔹 步骤 4：处理事件

* 使用 `mlx_hook` 和 `mlx_mouse_hook` 执行以下操作：

* **缩放**（鼠标滚轮）
* **移动**（箭头键）
* **更改分形**或颜色（按键）
* **退出程序**（`ESC` 键或关闭窗口）

---

## 💡 **4.管理分形**

### ✔️ 曼德布洛特

* `z = 0`
* `c = 像素复数坐标`

### ✔️ 朱莉娅

* `z = 像素复数坐标`
* `c = 选定常数（可用鼠标修改）`

### ✔️ （额外奖励）燃烧之船

* 与曼德布洛特相同，但：

$$
z_{n+1} = (|Re(z_n)| + i|Im(z_n)|)^2 + c
$$

---

## 🛠️ **5. 与代码的交互**

| 操作 | 含义 |
| ---------------- | ------------------------------ |
| 放大/缩小 | 鼠标滚轮 / + - |
| 移动 | 箭头键 |
| 退出 | ESC 或交叉点击（事件 17）|
| 更改分形 |按 1、2、3 等键 |
| 更改颜色 | 例如按 C |

---

## 🧮 **6. 像素到复数的转换**

```c
double scale = (max - min) / screen_width;
double re = x * scale + min;
double im = y * scale + min;
```

根据缩放和位置（偏移）进行调整。

---

## 🧰 **7. 推荐结构**

```c
typedef struct {
void *mlx;
void *win;
void *img;
char *img_data;
int bpp;
int line_len;
int endian;

double zoom;
double offset_x;
doubleoffset_y;
int max_iter;
int fractal_type; // 1 = 曼德布洛特，2 = 朱莉娅……
} t_fractol;
```

---

## 📦 **8. 编译**

创建一个简单的 Makefile：

```Makefile
CC = cc
CFLAGS = -Wall -Wextra -Werror

MLX = -lmlx -lXext -lX11 -lm
SRC = main.c draw.c utils.c fractals.c
OBJ = $(SRC:.c=.o)

fractol: $(OBJ)
$(CC) $(CFLAGS) -o fractol $(OBJ) $(MLX)
```

---

## 📘 需要以下方面的帮助：

* 先编写曼德布洛特分形代码？
* 管理键值？
* 创建清晰的结构？
* 添加滚轮平滑缩放？

先告诉我你想编写什么代码，我会一步一步地帮助你。


**MiniLibX**（或 **MLX**）是由 École 42 创建的**小型图形库**，旨在**学习如何使用 C 语言编写简单的图形界面**，**无需复杂的依赖关系**。

---

## 🎯 **主要用途**

允许您：

* 创建**图形窗口**。
* 绘制**像素、图像和形状**。
* 处理**键盘/鼠标事件**。
* 在 **X11 (Linux)** 或 **macOS** 环境中显示图像。

---

## 🧱 **主要功能**

| 函数 | 描述 |
| --------------------------- | -------------------------------------------- |
| `mlx_init()` | 初始化 MLX，返回上下文指针 |
| `mlx_new_window()` | 创建窗口 |
| `mlx_new_image()` |创建一个空图像 |
| `mlx_get_data_addr()` | 直接访问图像缓冲区 |
| `mlx_pixel_put()` | （慢速）在屏幕上绘制一个像素 |
| `mlx_put_image_to_window()` | 在窗口中显示图像 |
| `mlx_hook()` | 处理键盘/鼠标事件 |
| `mlx_loop()` | 无限事件循环（主循环） |
| `mlx_destroy_window()` | 关闭窗口 |

---

## 🖼️ **简单示例（显示窗口）**

```c
#include "mlx.h"

int main(void)
{
void *mlx;
void *win;

mlx = mlx_init(); // 初始化 MLX 上下文
win = mlx_new_window(mlx, 800, 600, "我的窗口");
mlx_loop(mlx); // 无限循环
return (0);
}
```

---

## ⚠️ 要点

* **底层**：MLX 不处理按钮、菜单等。→ 您直接操作**像素**。
* **不可移植**：MLX 依赖于 Linux 上的 X11 图形系统（或 macOS 上的包装器）。
* **功能非常有限**：它是为学习而设计的，而不是为制作专业游戏而设计的。

---

## 🧠 为什么 MiniLibX 在 Fract'ol 中很有用？

因为您需要：

* 在图像中绘制分形像素。
* 在窗口中显示此图像。
* 处理键盘/鼠标事件，用于缩放、导航等操作。

**MiniLibX 允许您完成所有这些操作，而无需使用大型库使项目负担过重。**

---

## 🧰 总结：

* 📦 **MiniLibX = 非常简单的图形工具箱**。
* 🎓 非常适合学习使用像素绘图。
* 🖱️ 管理键盘、鼠标、图像和窗口。
* ⚙️ 您可以在 **Fract'ol**、**so\_long**、**cub3D** 等程序中使用它。

如果您愿意，我可以向您展示一个创建窗口并绘制像素的示例。